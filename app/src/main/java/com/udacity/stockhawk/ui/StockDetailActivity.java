package com.udacity.stockhawk.ui;

import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.Loader;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;
import android.widget.TabHost;
import android.widget.TextView;
import android.widget.Toast;

import com.udacity.stockhawk.R;
import com.udacity.stockhawk.data.Contract;
import com.udacity.stockhawk.sync.QuoteIntentService;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.AxisValue;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;

public class StockDetailActivity extends AppCompatActivity {
    private static final String TAG = StockDetailActivity.class.getSimpleName();

    //https://discussions.udacity.com/t/chart-will-not-display-lines/218157

    private String mStockSymbol;
    private ActionBar mActionbar;
    //    private LineChart mLineChart;
    private LineChartView mChart;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_stock_detail);

        mStockSymbol = getIntent().getStringExtra("stock_name");

        mActionbar = getSupportActionBar();
        mActionbar.setTitle("Stock: " + mStockSymbol);

        mChart = (LineChartView) findViewById(R.id.stock_chart);
        TextView tv = (TextView) findViewById(R.id.historical_stock_data);

        String stocksHistory = getStockValueOverTime();
        updateChart(stocksHistory);
    }


    private String getStockValueOverTime() {
        Cursor cursor = getContentResolver().query(Contract.Quote.URI,
                new String[]{Contract.Quote.COLUMN_HISTORY},
                Contract.Quote.COLUMN_SYMBOL + "='" + mStockSymbol + "'",
                null, null);
        cursor.moveToFirst();

        if (cursor.getCount() > 0) {
            return cursor.getString(cursor.getColumnIndex(Contract.Quote.COLUMN_HISTORY));
        }
        Log.d(TAG, "error retrieving Stock values");
        return null;
    }

    private void updateChart(String stockData) {
        List<AxisValue> axisValuesX = new ArrayList<>();
        List<PointValue> pointValues = new ArrayList<>();
        String[] stocksHistory = stockData.split("\n");
        int numOfStockEntries = stocksHistory.length;

        Date[] stockDates = new Date[numOfStockEntries];
        String[] stockPrices = new String[numOfStockEntries];

        for (int i = 0; i < numOfStockEntries; i++) {
            String[] parts = stocksHistory[i].split(",");
            String date = parts[0];
            stockDates[i] = new Date(Long.parseLong(date));
            stockPrices[i] = parts[1];
        }

        for (int i = 0; i < stocksHistory.length; i++) {
            int x = stocksHistory.length - 1 - i;
            String stockPrice = stockPrices[i];
            String stockDate = String.format(String.format("%tc"), stockDates[i]);

//            PointValue pointValue = new PointValue(x, Float.valueOf(stockPrices[i]));
//            pointValue.setLabel(String.format(String.format("%tF"), stockDates[i]));
        }
        //prepare data for chart
        Line line = new Line(pointValues).setColor(Color.WHITE).setCubic(false);
        List<Line> lines = new ArrayList<>();
        lines.add(line);
        LineChartData lineChartData = new LineChartData();
        lineChartData.setLines(lines);

        // Init x-axis
        Axis axisX = new Axis(axisValuesX);
        axisX.setHasLines(true);
        axisX.setMaxLabelChars(4);
        lineChartData.setAxisXBottom(axisX);

        // Init y-axis
        Axis axisY = new Axis();
        axisY.setAutoGenerated(true);
        axisY.setHasLines(true);
        axisY.setMaxLabelChars(4);
        lineChartData.setAxisYLeft(axisY);

        // Update chart with new data.
        mChart.setInteractive(false);
        mChart.setLineChartData(lineChartData);

        // Show chart
        mChart.setVisibility(View.VISIBLE);

    }


}
